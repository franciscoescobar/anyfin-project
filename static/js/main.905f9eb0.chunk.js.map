{"version":3,"sources":["components/Form/styled.js","utils/api.js","components/Form/index.js","views/Home/styled.js","views/Home/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["FormWrapper","styled","form","CountriesSelect","select","MoneyInput","input","CountryList","ul","CurrencyWrapper","div","Title","h2","api","getCountries","a","fetch","baseCountriesURL","data","json","countries","console","log","getDataFromCountry","code","countryData","getCurrencyFromCountry","money","Form","useState","search","setSearch","setMoney","localCurrency","setLocalCurrency","setCountries","selectedCountry","setSelectedCountry","useEffect","then","currencies","localMoney","Object","values","Number","onChange","e","target","value","find","country","name","alpha3Code","dataCountry","map","key","className","capital","population","toString","replace","HomeWrapper","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.905f9eb0.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nexport const FormWrapper = styled.form`\r\n    width: 70%;\r\n    height: 80vh;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    background: white;  \r\n    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);\r\n    flex-direction: column;\r\n`;\r\nexport const CountriesSelect = styled.select`\r\n    width: 70%;\r\n    margin: 0 auto;\r\n    margin-top: 5%;\r\n    height: 42px;\r\n    border-radius: 5px;\r\n    border: 1px solid #42a5f5;\r\n    &:focus {\r\n        border: 1px solid #0077c2;\r\n    }\r\n`;\r\nexport const MoneyInput = styled.input`\r\n    text-align: center;\r\n    width: 30%;\r\n    margin: 0 auto;\r\n    margin-top: 5%;\r\n    height: 42px;\r\n    border-radius: 5px;\r\n    border: 1px solid #42a5f5;\r\n    &:focus {\r\n        border: 1px solid #0077c2;\r\n    }\r\n`;\r\nexport const CountryList = styled.ul`\r\n    list-style-type: none;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    margin: 0 20%;\r\n    text-align: center;\r\n    > li {\r\n        display:flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-wrap: wrap;\r\n        flex: 1 0 300px;\r\n        margin-top: 1rem;\r\n        > p {\r\n            flex: 1 0 300px;\r\n        }\r\n        .results {\r\n            font-weight: bold;\r\n        }\r\n    }\r\n`\r\nexport const CurrencyWrapper = styled.div`\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    > p {\r\n        margin: 1rem;\r\n    }\r\n`\r\nexport const Title = styled.h2`\r\n    font-size: 18px;\r\n    font-weight: normal;\r\n    margin-left: 4rem;\r\n    margin-top: 2rem;\r\n    margin-bottom: -1rem;\r\n`","const baseCountriesURL = \"https://restcountries.eu/rest/v2/\";\r\nconst baseCurrencyURL = \"https://free.currconv.com/api/v7\"\r\nconst access_key = '572ca773558508356656';\r\n    const api = {\r\n  getCountries: async () => {\r\n    const data = await fetch(baseCountriesURL + \"all\");\r\n    const countries = await data.json();\r\n    console.log(countries);\r\n    return countries;\r\n  },\r\n  getDataFromCountry: async (code) => {\r\n    const data = await fetch(baseCountriesURL + `alpha/${code}`);\r\n    const countryData = await data.json();\r\n    return countryData;  \r\n  },\r\n  getCurrencyFromCountry: async (code) => {\r\n    const data = await fetch(`${baseCurrencyURL}/convert?q=SEK_${code}&compact=ultra&apiKey=${access_key}`)\r\n    const money = await data.json();\r\n    return money;\r\n  }\r\n};\r\n\r\nexport default api;\r\n","import React, {useState, useEffect} from 'react'\r\nimport { FormWrapper, CountriesSelect, CountryList, MoneyInput, CurrencyWrapper, Title } from './styled';\r\nimport api from '../../utils/api';\r\nconst Form = () => {\r\n    const [search, setSearch] = useState(\"\");\r\n    const [money, setMoney] = useState(\"\");\r\n    const [localCurrency, setLocalCurrency] = useState(null);\r\n    const [countries, setCountries] = useState([]);\r\n    const [selectedCountry, setSelectedCountry] = useState(null);\r\n\r\n    useEffect(() => {\r\n        api.getCountries().then(countries => {\r\n            setCountries(countries);\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        selectedCountry && api.getCurrencyFromCountry(selectedCountry.currencies[0].code).then(localMoney => {\r\n            setLocalCurrency(Object.values(localMoney)[0] * Number(money));\r\n        });\r\n    }, [money, selectedCountry])\r\n\r\n    const onSearchChange = (e) => {\r\n        setSearch(e.target.value);\r\n        const selectedCountry = countries.find(country => country.name === e.target.value);\r\n        api.getDataFromCountry(selectedCountry.alpha3Code).then(dataCountry => {\r\n\r\n            setSelectedCountry(dataCountry);\r\n        })\r\n    }\r\n\r\n    const onMoneyChange = (e) => {\r\n        setMoney(e.target.value);\r\n    }\r\n\r\n\r\n    return (\r\n    <FormWrapper>\r\n        <Title>Choose a country:</Title>\r\n        <CountriesSelect onChange={onSearchChange} value={search}>\r\n            {\r\n            countries ? \r\n            countries.map(country => \r\n                <option key={country.name}>{country.name}</option>\r\n            ) : \r\n            <option>No options</option>\r\n            }\r\n        </CountriesSelect>\r\n        {selectedCountry &&\r\n            <CountryList>\r\n                <li>\r\n                    <p>Full Country Name</p>\r\n                    <p className=\"results\">{selectedCountry.name}</p>\r\n                </li>\r\n                <li>\r\n                    <p>Capital</p>\r\n                    <p className=\"results\">{selectedCountry.capital}</p>\r\n                </li>\r\n                <li>\r\n                    <p>Population</p>\r\n                    <p className=\"results\">{selectedCountry.population.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1.\")}</p>\r\n                </li>\r\n                <li>\r\n                    <p>Currency</p>\r\n                    <p className=\"results\">{selectedCountry.currencies[0].code}</p>\r\n                </li>\r\n            </CountryList>\r\n        }\r\n        <Title>Amount in SEK:</Title>\r\n        <MoneyInput onChange={onMoneyChange} value={money}/>\r\n        {selectedCountry &&\r\n            <CurrencyWrapper>\r\n                <p>SEK  {money || ''}</p>\r\n                <p>{selectedCountry.currencies[0].code}  {localCurrency || ''}</p>\r\n            </CurrencyWrapper>\r\n        }\r\n    </FormWrapper>\r\n)};\r\n\r\nexport default Form;","import styled from 'styled-components';\r\nexport const HomeWrapper = styled.div`\r\n    height: 100vh;\r\n    background-color: #42a5f5; \r\n`;","import React from 'react'\r\nimport Form from '../../components/Form';\r\nimport { HomeWrapper } from './styled';\r\n\r\nconst Home = () => (\r\n    <HomeWrapper>\r\n        <Form></Form>\r\n    </HomeWrapper>\r\n);\r\n\r\nexport default Home;","import React from 'react';\nimport Home from '../../views/Home';\n\nfunction App() {\n  return (\n    <Home></Home>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}